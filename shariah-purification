<!-- TamRor · Shariah Purification Card (Arabic)
     - Donation column narrower
     - "مسح السجل" button = pink (white text)
     - Symbol dropdown closes on selection and re-opens only when value changes
     - Mobile table keeps columns via horizontal scroll -->
<div id="tamror-purification" class="tamror-root">
  <style>
    :root{
      --bg:#ffffff; --text:#7A7A7A; --muted:#9aa3ab; --surface:#ffffff; --surface-2:#f6f8fb;
      --accent:#FC6481; --accent-600:#e55773; --border:#e7edf4; --shadow:0 6px 24px rgba(16,24,40,.06);
      --radius:16px; --control-h:44px; --ok:#16a34a; --bad:#ef4444;
    }
    .tamror-root{background:var(--bg); color:var(--text); font-family:"Work Sans", system-ui, -apple-system, Segoe UI, Roboto, Arial}
    .tamror-root *{font-family:"Work Sans", system-ui, -apple-system, Segoe UI, Roboto, Arial}

    .wrap{max-width:1100px;margin:0 auto;padding:0}
    .card{position:relative;background:var(--surface);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);padding:18px}

    .h2{font-size:16px;font-weight:700;margin:0 0 12px 0;color:#333;letter-spacing:.2px}
    .row{display:flex;gap:12px;flex-wrap:wrap; position:relative}
    .col{flex:1 1 220px; min-width:220px; position:relative}

    .label{font-size:12px;color:var(--muted);margin-bottom:6px;display:block; cursor:text}
    .input,.btn,select{
      width:100%; background:#fff; color:var(--text); border:1px solid var(--border); border-radius:12px;
      padding:10px 12px; font-size:15px; outline:none; box-sizing:border-box;
      position:relative; z-index:10; pointer-events:auto; touch-action:manipulation;
    }
    .input:focus{box-shadow:0 0 0 3px rgba(252,100,129,.15); border-color:var(--accent)}
    .btn{background:var(--accent);color:#fff;border:none;border-radius:12px;padding:10px 14px;font-weight:700;cursor:pointer;box-shadow:0 4px 14px rgba(252,100,129,.35); min-height:var(--control-h)}
    .btn:hover{background:var(--accent-600)}
    .btn-secondary{background:#fff;color:#7A7A7A;border:1px solid var(--border);box-shadow:none}
    .btn-ghost{background:#fff;color:#9aa3ab;border:1px dashed var(--border)}
    .helper{margin-top:8px;font-size:13px;color:#9aa3ab}
    .note{font-size:12px;color:#555;background:var(--surface-2);border:1px solid var(--border);padding:8px 10px;border-radius:10px;margin-top:10px}

    /* ===== Autocomplete dropdown ===== */
    .ac-wrap{position:relative}
    .ac-list{
      position:absolute; z-index:30; inset-inline:0; top:calc(100% + 6px);
      background:#fff; border:1px solid var(--border); border-radius:12px; box-shadow:var(--shadow);
      max-height:260px; overflow:auto; display:none; padding:6px;
    }
    .ac-item{
      padding:8px 10px; border-radius:10px; cursor:pointer; display:flex; align-items:center; gap:8px;
      font-size:14px; color:#333;
    }
    .ac-item .sym{font-weight:800; letter-spacing:.2px}
    .ac-item .nm{color:#7A7A7A; font-weight:500; overflow:hidden; text-overflow:ellipsis; white-space:nowrap}
    .ac-item:hover{background:#f6f8fb}

    /* ===== Table alignment ===== */
    .table{width:100%;border-collapse:separate;border-spacing:0 10px;margin-top:14px; table-layout:fixed}
    .table thead th{font-size:12px;text-align:right;color:#555;font-weight:700;padding:0 10px}
    .table td{background:#fff;border:1px solid var(--border);padding:10px;border-left:none;border-right:none}
    .table tr{box-shadow:var(--shadow)}
    .table td.actions{display:flex;gap:8px;justify-content:flex-start}

    /* Column widths (donation column narrowed) */
    .table col.c-sym { width:18% }
    .table col.c-div { width:18% }
    .table col.c-pct { width:14% }
    .table col.c-don { width:20% }  /* narrower than before */
    .table col.c-act { width:14% }

    /* Numeric cells: right aligned with LTR flow for punctuation */
    .table td.num, .table th.th-num{
      text-align:right; direction:ltr; unicode-bidi:plaintext; font-variant-numeric:tabular-nums;
    }
    .table td.sym, .table th.th-sym{ text-align:right; white-space:nowrap }
    .table td.act, .table th.th-act{ text-align:left }

    .totals{display:flex;justify-content:space-between;align-items:center;margin-top:12px;padding:10px 12px;border:1px solid var(--border);border-radius:12px;background:var(--surface-2)}
    .totals .sum{font-weight:800;color:#333}

    /* ===== Mobile: keep columns, enable horizontal scroll ===== */
    .table-shell{ width:100%; overflow-x:visible; }
    @media (max-width:680px){
      .table-shell{ overflow-x:auto; -webkit-overflow-scrolling:touch; }
      .table{ min-width: 760px; }
      .table thead{ display:table-header-group; }
      .table tr{ display:table-row; }
      .table td, .table th{ display:table-cell; }
      .table td::before{ content:none !important; }
    }
  </style>

  <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@400;600;700&display=swap" rel="stylesheet"/>

  <div class="wrap">
    <div class="card" id="purifyCard">
      <div class="h2">تنقية الأرباح (مطابقة الشريعة)</div>

      <!-- Inputs -->
      <div class="row" dir="rtl">
        <div class="col" data-focus="#p_symbol">
          <label class="label" for="p_symbol">الرمز</label>
          <div class="ac-wrap">
            <input id="p_symbol" class="input" autocomplete="off"/>
            <div id="p_ac_list" class="ac-list" role="listbox" aria-label="اقتراحات الرموز"></div>
          </div>
        </div>
        <div class="col" data-focus="#p_dividend">
          <label class="label" for="p_dividend">الأرباح المستلمة (USD)</label>
          <input id="p_dividend" class="input" type="number" step="0.01" min="0" inputmode="decimal"/>
        </div>
        <div class="col" data-focus="#p_pct">
          <label class="label" for="p_pct">نسبة الإيراد غير المتوافق (%)</label>
          <input id="p_pct" class="input" type="number" step="0.01" min="0" max="100" inputmode="decimal"/>
        </div>
        <div class="col" style="display:flex; align-items:flex-end; gap:8px; min-width:220px">
          <button id="p_fetch" class="btn btn-secondary" type="button">جلب النسبة من API</button>
          <button id="p_add" class="btn" type="button">إضافة إلى السجل</button>
        </div>
      </div>

      <div class="helper" dir="rtl">
        يتم حساب التبرع الواجب: <b>الأرباح × نسبة الإيراد غير المتوافق</b>.
        يمكنك إدخال النسبة يدويًا أو جلبها من خادمك (إن توفرت).
      </div>

      <!-- Ledger -->
      <div class="table-shell">
        <table class="table" id="p_table" dir="rtl" aria-live="polite" tabindex="-1">
          <colgroup>
            <col class="c-sym">
            <col class="c-div">
            <col class="c-pct">
            <col class="c-don">
            <col class="c-act">
          </colgroup>
          <thead>
            <tr>
              <th class="th-sym">الرمز</th>
              <th class="th-num">الأرباح (USD)</th>
              <th class="th-num">نسبة غير متوافق (%)</th>
              <th class="th-num">التبرع الواجب (USD)</th>
              <th class="th-act">إجراء</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>

      <!-- Totals & Actions -->
      <div class="totals" dir="rtl">
        <div>الإجمالي الواجب التبرع به:</div>
        <div class="sum" id="p_total">$0.00</div>
      </div>

      <div class="row" style="margin-top:10px" dir="rtl">
        <div class="col" style="flex:0 0 auto; display:flex; gap:8px">
          <button id="p_export" class="btn btn-secondary" type="button">تصدير CSV</button>
          <!-- Match CSV (secondary) style for Record/Clear -->
          <button id="p_clear" class="btn btn-secondary" type="button">مسح السجل</button>
        </div>
        <div class="col" style="flex:1">
          <div class="note">
            الملاحظة: تعتمد منهجية التنقية على المعيار المتبع (مثل AAOIFI أو معايير المؤشرات الإسلامية).
            يستخدم هذا النموذج نسبة <b>الإيرادات غير المتوافقة</b> لتنقية أرباح التوزيعات. عدّل النسبة يدويًا عند الحاجة.
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    (function(){
      const ORIGIN = window.location.origin || (location.protocol + '//' + location.host);
      const SHARIA_API = ORIGIN + '/wp-json/aiaas/v1/sharia-check';
      const PROXY_BASE = '/wp-json/alpaca/v1';
      const $ = (id)=>document.getElementById(id);
      // Bridge keys (must match trade module)
      const PURIFY_STORAGE_KEY = 'tamror_purify_queue';
      const PURIFY_STORAGE_TICK = 'tamror_purify_last';

      /* Helpers */
      const fmtUSD = (n)=> (n==null || isNaN(+n)) ? '$0.00' : (+n).toLocaleString(undefined,{style:'currency',currency:'USD'});
      const clamp = (v,min,max)=> Math.min(max, Math.max(min, v));
      const normSym = (s)=> String(s||'').trim().toUpperCase().replace(/[^A-Z0-9.\-]/g,'');
      const debounce = (fn,ms)=>{ let t; const f=(...a)=>{ clearTimeout(t); t=setTimeout(()=>{ t=null; fn(...a); },ms); }; f.cancel=()=>{clearTimeout(t);t=null;}; return f; };
      const escapeHTML = (s)=> String(s).replace(/[<>&"]/g, m=>({'<':'&lt;','>':'&gt;','&':'&amp;'}[m]));

      /* Autocomplete */
      const AC_SEED = ["AAPL","TSLA","NVDA","AMZN","GOOG","META","MSFT","ORCL","NFLX","ADBE","CRM","AMD","INTC","BA","DIS","V","MA","JPM","BAC","WFC","QCOM","MU","TXN","AVGO","COIN","PYPL","SQ","SHOP","UBER","SNOW","PANW","NIO","BABA","PDD","JD","T","VZ","ASML","SAP","NOW"];
      const acList = $('p_ac_list');
      const symInput = $('p_symbol');
      const amountInput = $('p_dividend');
      const pctInput = $('p_pct');

      let lastCommittedSymbol = "";    // -> keeps dropdown closed until value changes

      function closeAC(){ acList.style.display = 'none'; acList.innerHTML=''; }
      function openAC(){ if(acList.innerHTML) acList.style.display='block'; }

      function acRender(items){
        if(!items || !items.length){ closeAC(); return; }
        acList.innerHTML = items.slice(0,12).map(({s,n})=>{
          const name = n ? `<span class="nm">${escapeHTML(n)}</span>` : '';
          return `<div class="ac-item" data-s="${escapeHTML(s)}"><span class="sym">${escapeHTML(s)}</span>${name}</div>`;
        }).join('');
        acList.querySelectorAll('.ac-item').forEach(div=>{
          div.onclick = ()=> selectSymbol(div.getAttribute('data-s'));
          div.ontouchstart = ()=> selectSymbol(div.getAttribute('data-s')); // mobile tap
        });
        openAC();
      }

      async function searchProxy(q){
        try{
          const r = await fetch(`${PROXY_BASE}/market/search?q=${encodeURIComponent(q)}&_ts=${Date.now()}`, {cache:'no-store'});
          if(!r.ok) return [];
          const j = await r.json();
          const list = Array.isArray(j) ? j : (Array.isArray(j?.symbols) ? j.symbols : []);
          return list.map(it=>{
            const s = normSym(it.symbol || it.S || it.ticker || it.code || it);
            const n = String(it.name || it.companyName || it.description || '').trim();
            return s ? {s, n} : null;
          }).filter(Boolean);
        }catch(_){ return []; }
      }

      const doAC = debounce(async ()=>{
        const current = normSym(symInput.value);
        if(!current || current === lastCommittedSymbol){ closeAC(); return; } // don't re-open unless changed
        const local = AC_SEED.filter(s=> s.indexOf(current)===0).map(s=>({s, n:''}));
        const remote = await searchProxy(current);
        const seen = new Set();
        const merged = [...local, ...remote].filter(x=>{ if(seen.has(x.s)) return false; seen.add(x.s); return true; });
        acRender(merged.length ? merged : local);
      }, 140);

      function selectSymbol(s){
        const v = normSym(s);
        symInput.value = v;
        lastCommittedSymbol = v;   // remember selection
        doAC.cancel && doAC.cancel();
        closeAC();                 // keep it closed until user edits the value
        amountInput && amountInput.focus();
      }

      symInput.addEventListener('input', doAC);
      // On focus: only open if user previously changed value (handled by doAC condition)
      symInput.addEventListener('focus', doAC);
      symInput.addEventListener('keydown', (e)=>{
        if(e.key === 'Enter'){
          e.preventDefault();
          const first = acList.querySelector('.ac-item');
          if(first){ selectSymbol(first.getAttribute('data-s')); }
          else { const v = normSym(symInput.value); if(v){ selectSymbol(v); } }
        } else if(e.key === 'Escape'){
          closeAC();
        }
      });
      symInput.addEventListener('blur', ()=> setTimeout(closeAC, 120));

      /* Column focus helper */
      document.querySelectorAll('#tamror-purification .col[data-focus]').forEach(col=>{
        col.addEventListener('click', ()=>{
          const el = document.querySelector(col.getAttribute('data-focus'));
          if(el && !el.disabled){ try{ el.focus({preventScroll:true}); el.select && el.select(); }catch(_){ el.focus(); } }
        });
      });

      /* Purification logic */
      const tableEl = $('p_table');
      const tbody = tableEl.querySelector('tbody');

      function calcDonation(dividend, pct){
        const d = Number(dividend), p = Number(pct);
        if(!isFinite(d) || !isFinite(p)) return 0;
        return d * (p/100);
      }

      function recalcTotal(){
        let sum = 0;
        tbody.querySelectorAll('tr').forEach(tr=>{
          const v = Number(tr.getAttribute('data-donation') || '0');
          if(isFinite(v)) sum += v;
        });
        $('p_total').textContent = fmtUSD(sum);
      }

      function addRow(sym, dividend, pct){
        const cleanSym = normSym(sym);
        const displaySym = cleanSym || String(sym||'').trim().toUpperCase();
        const donation = calcDonation(dividend, pct);
        const tr = document.createElement('tr');
        tr.setAttribute('data-donation', String(donation));
        tr.setAttribute('data-symbol', displaySym);
        function td(label, html, cls){
          const cell = document.createElement('td');
          cell.setAttribute('data-label', label);
          if (cls) cell.className = cls;
          cell.innerHTML = html;
          return cell;
        }
        tr.appendChild(td('الرمز', `<b style="color:#333">${escapeHTML(displaySym)}</b>`, 'sym'));
        tr.appendChild(td('الأرباح (USD)', fmtUSD(dividend), 'num'));
        tr.appendChild(td('نسبة غير متوافق (%)', (isFinite(pct)? (+pct).toFixed(2) : '—'), 'num'));
        tr.appendChild(td('التبرع الواجب (USD)', `<b style="color:#333">${fmtUSD(donation)}</b>`, 'num'));

        const actions = document.createElement('td');
        actions.className = 'actions act';
        actions.setAttribute('data-label','إجراء');
        const del = document.createElement('button');
        del.className='btn'; del.type='button'; del.textContent='حذف';
        del.onclick = ()=>{ tr.remove(); recalcTotal(); };
        actions.appendChild(del);
        tr.appendChild(actions);

        tbody.insertBefore(tr, tbody.firstChild);
        recalcTotal();
        return tr;
      }

      // Consume bridge queue from localStorage (for cross-page/tab handoff)
      function consumeBridgeQueue(){
        try{
          if(typeof localStorage === 'undefined') return;
          const raw = localStorage.getItem(PURIFY_STORAGE_KEY);
          if(!raw) return;
          let list = [];
          try{ list = JSON.parse(raw); }catch(_){ list = []; }
          if(!Array.isArray(list) || !list.length) return;
          // Drain queue into the table; latest first
          const seen = new Set();
          list.forEach(item => {
            const sym = normSym(item && item.symbol);
            const profit = Number(item && item.profit);
            let pct = Number(item && item.nonCompliantPct);
            if(!sym || !(isFinite(profit) && profit > 0)) return;
            if(!(isFinite(pct) && pct >= 0)){ pct = 100; }
            if(seen.has(sym)) return; // show once per symbol on consume
            seen.add(sym);
            const existing = tbody.querySelector(`tr[data-symbol='${sym}'][data-source='auto']`);
            if(existing){ existing.remove(); }
            const row = addRow(sym, profit, clamp(pct,0,100));
            if(row){ row.setAttribute('data-source','auto'); }
          });
          // Clear after consuming
          localStorage.removeItem(PURIFY_STORAGE_KEY);
        }catch(_){ }
      }

      async function fetchRatio(sym){
        const url = SHARIA_API + '?symbol=' + encodeURIComponent(sym) + '&_ts=' + Date.now();
        const res = await fetch(url, { cache:'no-store' });
        if(!res.ok){
          const t = await res.text().catch(()=> '');
          throw new Error('HTTP '+res.status+': '+t);
        }
        const j = await res.json();
        return j && j.ratios && (j.ratios.non_compliant_revenue_pct ?? j.ratios.non_compliant_income_pct);
      }

      $('p_fetch').addEventListener('click', async ()=>{
        const sym = normSym(symInput.value);
        if(!sym){ alert('أدخل رمز السهم أولًا.'); return; }
        $('p_fetch').disabled = true; $('p_fetch').textContent = 'جارٍ الجلب…';
        try{
          const pct = Number(await fetchRatio(sym));
          if(!isFinite(pct)){
            alert('تعذر الحصول على النسبة من الخادم. أدخِلها يدويًا.');
          }else{
            pctInput.value = clamp(pct, 0, 100).toFixed(2);
          }
        }catch(e){
          alert('خطأ في الجلب: ' + (e && e.message ? e.message : e));
        }finally{
          $('p_fetch').disabled = false; $('p_fetch').textContent = 'جلب النسبة من API';
        }
      });

      $('p_add').addEventListener('click', ()=>{
        const sym = normSym(symInput.value);
        const div = Number(amountInput.value);
        const pct = Number(pctInput.value);
        if(!sym){ alert('الرمز مطلوب.'); return; }
        if(!(isFinite(div) && div >= 0)){ alert('الأرباح غير صالحة.'); return; }
        if(!(isFinite(pct) && pct >= 0 && pct <= 100)){ alert('النسبة غير صالحة (0–100).'); return; }
        addRow(sym, div, clamp(pct,0,100));
        // Clear and keep AC closed until the user types again
        symInput.value = '';
        lastCommittedSymbol = '';
        amountInput.value = '';
        pctInput.value = '';
        closeAC();
        try{ tableEl.focus({preventScroll:true}); }catch(_){ tableEl.focus(); }
      });

      window.addEventListener('tamror:purification:add', async (ev)=>{
        try{
          const detail = ev.detail || {};
          const sym = normSym(detail.symbol);
          const profit = Number(detail.profit);
          if(!sym || !(isFinite(profit) && profit > 0)) return;

          let pct = Number(detail.nonCompliantPct);
          if(!(isFinite(pct) && pct >= 0)){
            try{
              const fetched = await fetchRatio(sym);
              if(isFinite(fetched)){ pct = Number(fetched); }
            }catch(_){ }
          }
          if(!(isFinite(pct) && pct >= 0)){ pct = 100; }
          pct = clamp(pct, 0, 100);

          const existing = tbody.querySelector(`tr[data-symbol='${sym}'][data-source='auto']`);
          if(existing){ existing.remove(); }

          const row = addRow(sym, profit, pct);
          if(row){ row.setAttribute('data-source','auto'); }
        }catch(_){ }
      });

      // Also react to storage changes (other tabs/pages touching the bridge)
      window.addEventListener('storage', (e)=>{
        try{
          if(e && (e.key === PURIFY_STORAGE_KEY || e.key === PURIFY_STORAGE_TICK)){
            consumeBridgeQueue();
          }
        }catch(_){ }
      });

      $('p_clear').addEventListener('click', ()=>{
        if(!confirm('مسح جميع السجلات؟')) return;
        tbody.innerHTML = '';
        recalcTotal();
      });

      $('p_export').addEventListener('click', ()=>{
        const rows = [['Symbol','DividendUSD','NonCompliantPct','DonationUSD']];
        tbody.querySelectorAll('tr').forEach(tr=>{
          const tds = tr.querySelectorAll('td');
          const sym = (tds[0]?.innerText || '').trim();
          const div = (tds[1]?.innerText || '').replace(/[^0-9.\-]/g,'');
          const pct = (tds[2]?.innerText || '').replace('%','').trim();
          const don = (tds[3]?.innerText || '').replace(/[^0-9.\-]/g,'');
          rows.push([sym, div, pct, don]);
        });
        const total = $('p_total').textContent.replace(/[^0-9.\-]/g,'');
        rows.push(['TOTAL','','', ''+total]);

        const csv = rows.map(r=> r.map(v=>{
          const s = String(v==null?'':v);
          return /[,"\n]/.test(s) ? '"'+s.replace(/"/g,'""')+'"' : s;
        }).join(',')).join('\n');

        const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url; a.download = 'tamror_sharia_purification.csv';
        document.body.appendChild(a); a.click(); a.remove();
        setTimeout(()=> URL.revokeObjectURL(url), 2000);
      });
      // On load, consume any pending items from the trade module
      consumeBridgeQueue();

    })();
  </script>
</div>
