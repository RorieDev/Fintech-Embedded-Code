<!-- TamRor · Market Showcase + Sharia Flyout (Arabic) · anti-judder fixed hero height + tighter hero padding -->
<div id="tamror-market-extras">
  <style>
    :root{
      --bg:#ffffff; --text:#7A7A7A; --muted:#9aa3ab; --accent:#FC6481; --accent-600:#e55773;
      --border:#e7edf4; --surface:#ffffff; --surface-2:#f6f8fb; --shadow:0 6px 24px rgba(16,24,40,.06);
      --bad:#ef4444; --ok:#16a34a; --control-h:44px;

      /* ===== ANTI-JUDDER FIX: unified hero height ===== */
      --hero-h: 380px;
    }
    @media (max-width:900px){ :root{ --hero-h: 400px } }
    @media (max-width:640px){ :root{ --hero-h: 430px } }

    #tamror-market-extras{background:var(--bg);color:var(--text);font-family:"Work Sans",system-ui,-apple-system,Segoe UI,Roboto,Arial}
    .wrap{max-width:1100px;margin:0 auto;padding:20px}

    /* Ticker */
    .ticker-shell{position:relative; overflow:hidden; height:58px; border:1px solid var(--border); border-radius:14px; background:var(--surface); box-shadow:var(--shadow)}
    .lane{position:absolute; top:0; bottom:0; left:0; display:flex; align-items:center; gap:28px; white-space:nowrap; padding:12px 16px}
    .laneA{animation:slideA 35s linear infinite}
    .laneB{animation:slideB 35s linear infinite}
    @keyframes slideA{ from{ transform:translateX(0) } to{ transform:translateX(-100%) } }
    @keyframes slideB{ from{ transform:translateX(100%) } to{ transform:translateX(0) } }
    .tick{display:inline-flex;align-items:center;gap:8px;padding:6px 10px;border-radius:999px;background:var(--surface-2);border:1px solid var(--border)}
    .tick-symbol{font-weight:800;color:#333;padding-bottom:2px}
    .tick-price{font-weight:700}
    .up{color:var(--ok)} .down{color:var(--bad)}

    /* Cards / Head */
    .card{margin-top:16px;background:var(--surface);border:1px solid var(--border);border-radius:16px;box-shadow:var(--shadow);padding:14px}
    /* ↓ Half the padding specifically for the hero card */
    .card.hero{ padding:8px; margin-top:8px; }

    .head{display:flex;gap:12px;align-items:center;justify-content:space-between;flex-wrap:wrap}
    .title{font-weight:800;color:#333}
    .chg-neg{color:var(--bad);font-weight:700}
    .chg-pos{color:var(--ok);font-weight:700}

    /* Heatmap */
    .heat-grid{display:grid;grid-template-columns:repeat(6,1fr);gap:10px}
    @media (max-width:900px){ .heat-grid{grid-template-columns:repeat(3,1fr)} }
    @media (max-width:640px){ .heat-grid{grid-template-columns:repeat(2,1fr)} }
    .heat-tile{position:relative;border-radius:16px;border:1px solid var(--border);padding:10px 12px;overflow:hidden;background:linear-gradient(180deg, rgba(0,0,0,0) 0%, rgba(0,0,0,.02) 100%)}
    .heat-head{display:flex;justify-content:space-between;align-items:center}
    .heat-sym{font-weight:800;color:#333}
    .heat-delta{font-weight:800}
    .heat-spark{height:42px;margin-top:6px}
    .glow{position:absolute;inset:0;pointer-events:none;box-shadow:0 0 0 2px rgba(0,0,0,0)}

    /* Hero Carousel */
    .hero{
      position:relative;border-radius:16px;overflow:hidden;background:linear-gradient(135deg,#fff,#f9fbff);
      height:var(--hero-h);
    }
    #heroSlides{
      height:calc(var(--hero-h) - 14px);
      overflow:hidden;
    }
    /* ↓ Half the inner padding too (was 18px) */
    .hero-slide{display:none;align-items:center;gap:16px;padding:9px;height:100%}
    .hero-slide.active{display:flex;animation:fadeIn .5s ease}
    @keyframes fadeIn{ from{opacity:0; transform:translateY(6px)} to{opacity:1; transform:none} }
    .hero-left{flex:1 1 40%; min-width:0}
    .hero-right{flex:1 1 60%; display:flex; align-items:stretch}
    .hero-price{font-size:34px;font-weight:800;color:#333; white-space:nowrap; overflow:hidden; text-overflow:ellipsis}
    .hero-delta{font-size:18px;font-weight:800;margin-left:10px}
    .hero-chart{width:100%;height:160px; align-self:stretch}

    /* Symbol row to host pill + flyout */
    .symbol-row{display:flex;align-items:center;gap:8px;flex-wrap:nowrap}

    /* CTA steady height */
    .hero-cta{margin-top:10px; display:flex; gap:10px; flex-wrap:wrap; min-height:var(--control-h)}
    .btn{background:var(--accent);color:#fff;border:none;border-radius:12px;padding:10px 14px;font-weight:700;cursor:pointer;box-shadow:0 4px 14px rgba(252,100,129,.35); min-height:var(--control-h)}
    .btn:hover{background:var(--accent-600)}
    .btn-secondary{background:#fff;color:#text;border:1px solid var(--border);box-shadow:none}
    .btn.ghost{visibility:hidden; pointer-events:none}

    .progress{position:absolute;left:0;top:0;height:4px;background:var(--accent);width:0;transition:width .2s linear}
    .hero-nav{position:absolute;right:10px;bottom:10px;display:flex;gap:6px}
    .dot{width:8px;height:8px;border-radius:50%;background:#dbe2ea}
    .dot.active{background:var(--accent)}

    .status{margin-top:10px;font-size:12px;color:#555;background:var(--surface-2);border:1px solid var(--border);border-radius:10px;padding:8px}
    .status b{color:#333} .ok{color:#16a34a;font-weight:800} .err{color:#ef4444;font-weight:800}
    /* ↓ Half the space below the hero card only */
    .card.hero + .status { margin-top:5px; }

    /* ================= Sharia Pill + Panel ================= */
    .sharia-pill{
      display:inline-flex; align-items:center; gap:6px;
      font: 600 12px/1.1 "Work Sans", system-ui, -apple-system, Segoe UI, Roboto, Arial;
      border:1px solid; border-radius:999px; padding:6px 10px; white-space:nowrap;
      margin-inline-start:8px; vertical-align:middle; position:relative;
      background:#fff;
    }
    .sharia-pill .dot{width:8px;height:8px;border-radius:50%}
    .sharia-pill[data-status="halal"]      { color:#065f46; border-color:#a7f3d0; background:#ecfdf5 }
    .sharia-pill[data-status="halal"] .dot { background:#10b981 }
    .sharia-pill[data-status="review"]     { color:#92400e; border-color:#fde68a; background:#fffbeb }
    .sharia-pill[data-status="review"] .dot{ background:#f59e0b }
    .sharia-pill[data-status="haram"],
    .sharia-pill[data-status="non-halal"],
    .sharia-pill[data-status="non_compliant"],
    .sharia-pill[data-status="non-compliant"],
    .sharia-pill[data-status="noncompliant"],
    .sharia-pill[data-status="not-compliant"],
    .sharia-pill[data-status="not_compliant"],
    .sharia-pill[data-status="impermissible"],
    .sharia-pill[data-status="prohibited"],
    .sharia-pill[data-status="fail"],
    .sharia-pill[data-status="failed"]{
      color:#7f1d1d; border-color:#fecaca; background:#fef2f2;
    }
    .sharia-pill[data-status="haram"] .dot,
    .sharia-pill[data-status="non-halal"] .dot,
    .sharia-pill[data-status="non_compliant"] .dot,
    .sharia-pill[data-status="non-compliant"] .dot,
    .sharia-pill[data-status="noncompliant"] .dot,
    .sharia-pill[data-status="not-compliant"] .dot,
    .sharia-pill[data-status="not_compliant"] .dot,
    .sharia-pill[data-status="impermissible"] .dot,
    .sharia-pill[data-status="prohibited"] .dot,
    .sharia-pill[data-status="fail"] .dot,
    .sharia-pill[data-status="failed"] .dot{ background:#ef4444; }

    .tick .sharia-pill{ margin-inline-start:6px; padding:4px 8px; font-size:11px; line-height:1.1; box-shadow:none; }

    /* Floating panel (hero only) */
    .sharia-panel{
      position:absolute; top:0; left:auto; transform:none; display:none; z-index:30;
      min-width:240px; max-width:360px; background:var(--surface); border:1px solid var(--border);
      border-radius:12px; box-shadow:var(--shadow); padding:10px 12px; color:#444; font-size:12px; line-height:1.45;
      pointer-events:auto;
    }
    .sharia-panel.show{ display:block; }
    .sharia-panel .row{display:flex;justify-content:space-between;gap:10px;margin:6px 0}
    .sharia-panel .row .k{color:#6b7280;font-weight:600}
    .sharia-panel .row .v{color:#374151}
    .sharia-panel .reasons{margin-top:8px;color:#374151}
    .sharia-panel .title{font-weight:800;color:#111;margin-bottom:6px}

    .sharia-panel::before, .sharia-panel::after{ content:""; position:absolute; top:50%; transform:translateY(-50%); width:0; height:0; border:7px solid transparent; }
    .sharia-panel[data-side="right"]{ left:calc(100% + 8px); right:auto; }
    .sharia-panel[data-side="right"]::before{ left:-14px; border-right-color:var(--border); }
    .sharia-panel[data-side="right"]::after { left:-13px; border-right-color:var(--surface); }
    .sharia-panel[data-side="left"]{ right:calc(100% + 8px); left:auto; }
    .sharia-panel[data-side="left"]::before{ right:-14px; border-left-color:var(--border); }
    .sharia-panel[data-side="left"]::after { right:-13px; border-left-color:var(--surface); }

    @media (max-width:640px){
      .sharia-pill{ position:relative; }
      .sharia-panel{
        top: calc(100% + 10px) !important; left: 0 !important; right: auto !important; transform: none !important;
        max-width: min(88vw, 320px);
      }
      .sharia-panel[data-side="right"], .sharia-panel[data-side="left"]{ left: 0 !important; right: auto !important; }
      .sharia-panel::before, .sharia-panel::after{
        top: -14px; transform:none; left: 16px; right:auto; border-left-color: transparent; border-right-color: transparent;
      }
      .sharia-panel::before{ border-bottom-color: var(--border); }
      .sharia-panel::after { border-bottom-color: var(--surface); top: -13px; }
    }
  </style>

  <!-- Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@400;600;700;800&amp;display=swap" rel="stylesheet" />

  <div class="wrap">
    <!-- Ticker -->
    <div class="ticker-shell" aria-label="شريط السوق">
      <div id="laneA" class="lane laneA"></div>
      <div id="laneB" class="lane laneB"></div>
    </div>

    <!-- Heatmap -->
    <div class="card">
      <div class="head"><div class="title">خريطة الأداء الحرارية</div></div>
      <div id="heatGrid" class="heat-grid"></div>
    </div>

    <!-- Hero -->
    <div class="card hero" id="heroCard">
      <div id="heroProgress" class="progress"></div>
      <div id="heroSlides"></div>
      <div id="heroNav" class="hero-nav"></div>
    </div>

    <div class="status">
      <div><b>شريط الأسعار:</b> <span id="tickStatus">جارٍ الانتظار…</span> · <b>البيانات:</b> Alpaca IEX · <b>الخادم الوسيط:</b> <span id="proxyBase">/wp-json/alpaca/v1</span></div>
    </div>
  </div>

  <script>
    /* =============== Market Core =============== */
    const PROXY_BASE = "/wp-json/alpaca/v1";
    const DEFAULT_WATCH = ["AAPL","TSLA","NVDA","GOOG","META","ORCL"];
    const TICKER_REFRESH_MS = 30000, HERO_ROTATE_MS = 6000, POSITIONS_REFRESH_MS = 30000, HEADER_OFFSET = 88;
    const $ = (id)=>document.getElementById(id);
    const fmt = (n,d=2)=> (n==null||isNaN(+n) ? "—" : (+n).toFixed(d));
    const isoDaysAgo = (n)=> new Date(Date.now() - n*24*3600*1000).toISOString();
    $("proxyBase").textContent = PROXY_BASE;

    async function api(path, q={}){
      const qs = Object.entries(q).map(([k,v])=>`${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join("&");
      const url = `${PROXY_BASE}${path}${qs?("?"+qs):""}`;
      const r = await fetch(url, {cache:"no-store"}); const txt = await r.text();
      if(!r.ok){ throw new Error(txt || r.statusText); }
      try { return JSON.parse(txt); } catch { return txt; }
    }
    const getSnapshot = (symbol)=> api(`/market/snapshot/${encodeURIComponent(symbol)}`);
    const getPositions = ()=> api(`/positions`);
    function getBars(symbol, timeframe){
      const isDaily = timeframe==="1Day";
      return api(`/market/bars/${encodeURIComponent(symbol)}`, {
        timeframe, feed:"iex", adjustment:"split",
        limit: isDaily ? 365 : 600,
        start: isDaily ? isoDaysAgo(420) : isoDaysAgo(7)
      });
    }
    async function fetchSnapshots(symbols){
      const out = [];
      await Promise.all(symbols.map(async s=>{
        try{
          const snap = await getSnapshot(s);
          const last  = snap?.latestTrade?.p ?? snap?.minuteBar?.c ?? null;
          const prevc = snap?.prevDailyBar?.c ?? snap?.dailyBar?.o ?? null;
          const delta = (last!=null && prevc!=null) ? (last-prevc) : null;
          const pc    = (last!=null && prevc!=null) ? ((delta/prevc)*100) : null;
          out.push({s,last,delta,pc});
        }catch(e){}
      }));
      return out.filter(r=>r.last!=null && r.pc!=null);
    }

    /* Holdings */
    let HELD = new Set();
    async function refreshHeld(){
      try{
        const list = await getPositions();
        HELD = new Set((Array.isArray(list)?list:[]).filter(p=> Number(p.qty) > 0 ).map(p=> String(p.symbol||"").toUpperCase()));
      }catch(e){}
    }

    /* =============== Sharia helpers =============== */
    const AIAAS_SHARIA_URL = (window.location.origin || (location.protocol + '//' + location.host)) + '/wp-json/aiaas/v1/sharia-check';
    const shariaCache = new Map();
    function normaliseSymbol(s){ return String(s || '').trim().toUpperCase().replace(/[^A-Z0-9.\-]/g,''); }
    const SHARIA_THRESHOLDS = { non_compliant_revenue_pct:5, debt_to_marketcap:30, cash_interest_to_marketcap:30 };
    function statusToArabic(s){
      s = (s||'').toLowerCase().trim();
      if (s === 'halal' || s === 'compliant') return 'متوافق';
      if (['haram','non-halal','non_compliant','non-compliant','noncompliant','not-compliant','not_compliant','impermissible','prohibited','fail','failed'].includes(s)) return 'غير متوافق';
      return 'قيد المراجعة';
    }
    function normalizeStatus(status){
      const s = String(status||'review').toLowerCase().trim();
      if (/^(halal|compliant)$/.test(s)) return 'halal';
      if (/(non[-_\s]?compliant|not[-_\s]?compliant|non[-_\s]?halal|impermissible|prohibit(?:ed|ion)?|non[-_\s]?shariah|fail(?:ed)?)/.test(s)) return 'non-halal';
      return 'review';
    }
    function deriveStatus(data){
      const base = normalizeStatus(data?.status);
      if (base === 'non-halal' || base === 'halal') return base;
      const r = (data && data.ratios) || {};
      const t = SHARIA_THRESHOLDS;
      return (+r.non_compliant_revenue_pct>t.non_compliant_revenue_pct || +r.debt_to_marketcap>t.debt_to_marketcap || +r.cash_interest_to_marketcap>t.cash_interest_to_marketcap) ? 'non-halal' : base;
    }
    async function fetchSharia(symbol){
      const key = normaliseSymbol(symbol);
      if (!key) return Promise.reject(new Error('No symbol'));
      if (shariaCache.has(key)) return shariaCache.get(key);
      const url = AIAAS_SHARIA_URL + '?symbol=' + encodeURIComponent(key) + '&_ts=' + Date.now();
      const p = fetch(url, { cache: 'no-store' })
        .then(async res=>{ const txt = await res.text(); if(!res.ok) throw new Error('HTTP '+res.status+': '+txt);
          let j; try{ j = JSON.parse(txt); }catch(_){ j = {}; }
          const raw = (j && (j.status ?? j.result?.status ?? j.data?.status)) ?? 'review';
          return { ...j, status: String(raw).trim() };
        })
        .catch(err=>({ status: 'review', reasons:['تعذر الاتصال بالخادم'], ratios:{}, error: String(err && err.message || err) }));
      shariaCache.set(key, p); return p;
    }
    function pillHTML(status){
      const st = normalizeStatus(status), label = statusToArabic(st);
      return `<span class="sharia-pill" data-status="${st}" aria-label="${label}"><span class="dot" aria-hidden="true"></span>${label}</span>`;
    }
    async function getShariaStatusMap(symbols){
      const uniq = Array.from(new Set(symbols.map(normaliseSymbol).filter(Boolean)));
      const entries = await Promise.all(uniq.map(s => fetchSharia(s).then(d => [s, deriveStatus(d)]).catch(() => [s, 'review'])));
      const map = Object.create(null); entries.forEach(([s,st])=> map[s]=st); return map;
    }

    /* =============== Ticker =============== */
    function renderTicks(rows, statusMap){
      return rows.map(r=>{
        const cls = (r.delta||0)>=0 ? "up":"down";
        const st = statusMap[normaliseSymbol(r.s)] || 'review';
        return `<span class="tick">
          <span class="tick-symbol">${r.s}</span>
          ${pillHTML(st)}
          <span class="tick-price ${cls}">${fmt(r.last)}</span>
          <span class="${cls}">${(r.delta>=0?"+":"")+fmt(r.delta)}</span>
          <span class="${cls}">${(r.pc>=0?"+":"")+fmt(r.pc)}%</span>
        </span>`;
      }).join("");
    }
    function ensureFill(lane, shell){ const base = lane.innerHTML; if(!base) return; let times = Math.ceil(shell.clientWidth / lane.scrollWidth); if(times > 1) lane.innerHTML = Array(times).fill(base).join(""); }
    function restartAnimation(el){ if(!el) return; el.style.animation="none"; void el.offsetWidth; el.style.animation=""; }
    async function loadTicker(symbols){
      try{
        const rows = await fetchSnapshots(symbols);
        const statusMap = await getShariaStatusMap(rows.map(r=>r.s));
        const mid = Math.ceil(rows.length/2);
        const aRows = rows.slice(0, mid), bRows = rows.slice(mid);
        const shell = document.querySelector(".ticker-shell"); const laneA = $("laneA"), laneB = $("laneB");
        laneA.innerHTML = renderTicks(aRows.length ? aRows : rows, statusMap);
        laneB.innerHTML = renderTicks(bRows.length ? bRows : rows, statusMap);
        requestAnimationFrame(()=>{ ensureFill(laneA, shell); ensureFill(laneB, shell); restartAnimation(laneA); restartAnimation(laneB); });
        $("tickStatus").textContent="جاهز"; $("tickStatus").className="ok";
      }catch(e){ $("tickStatus").textContent="خطأ"; $("tickStatus").className="err"; }
    }

    /* Sparkline */
    function drawSparkline(el, values, colors){
      const w = el.clientWidth || 120, h = el.clientHeight || 30;
      if(!values || values.length<2){ el.innerHTML=""; return; }
      const min = Math.min(...values), max = Math.max(...values);
      const norm = v => (max===min) ? h/2 : (h - ((v-min)/(max-min))*h);
      const step = w / (values.length-1);
      let d=""; values.forEach((v,i)=>{ const x=i*step, y=norm(v); d += (i?" L":"M")+x+" "+y; });
      const uptrend = values.at(-1) >= values[0];
      const stroke = uptrend ? (colors?.up || "#16a34a") : (colors?.down || "#ef4444");
      const fill   = uptrend ? (colors?.upFill || "rgba(22,163,74,.12)") : (colors?.downFill || "rgba(239,68,68,.12)");
      const area = d + ` L ${w} ${h} L 0 ${h} Z`;
      el.innerHTML = `<svg width="${w}" height="${h}" viewBox="0 0 ${w} ${h}" preserveAspectRatio="none">
        <path d="${area}" fill="${fill}"></path>
        <path d="${d}" fill="none" stroke="${stroke}" stroke-width="2"></path>
      </svg>`;
    }

    /* Heatmap */
    function hueForPct(pc){
      const clamp = Math.max(-5, Math.min(5, pc||0));
      return clamp>0 ? `rgba(22,163,74,${Math.min(0.18, Math.abs(clamp)/12)})`
                     : `rgba(239,68,68,${Math.min(0.18, Math.abs(clamp)/12)})`;
    }
    async function renderHeatmap(){
      const grid = $("heatGrid"); grid.innerHTML="";
      const rows = (await fetchSnapshots(DEFAULT_WATCH)).sort((a,b)=>Math.abs(b.pc)-Math.abs(a.pc)).slice(0,6);
      for(const r of rows){
        const tile = document.createElement("div"); tile.className="heat-tile";
        const dir = r.pc>=0 ? "chg-pos":"chg-neg";
        const pct = (r.pc>=0?"+":"")+fmt(r.pc)+"%";
        tile.innerHTML = `
          <div class="heat-head">
            <div class="heat-sym">${r.s}</div>
            <div class="heat-delta ${dir}">${pct}</div>
          </div>
          <div class="heat-spark"></div>
          <div class="glow"></div>`;
        grid.appendChild(tile);
        tile.style.background = `linear-gradient(180deg, ${hueForPct(r.pc)}, rgba(0,0,0,0))`;
        tile.querySelector(".glow").style.boxShadow = r.pc>=0 ? `0 0 0 3px rgba(22,163,74,.14)` : `0 0 0 3px rgba(239,68,68,.14)`;
        try{
          const bars = await getBars(r.s, "15Min");
          const closes = (bars?.bars||[]).map(b=>+b.c).filter(n=>!isNaN(n)).slice(-60);
          drawSparkline(tile.querySelector(".heat-spark"), closes, {up:"#16a34a",down:"#ef4444",upFill:"rgba(22,163,74,.14)",downFill:"rgba(239,68,68,.14)"});
        }catch(e){}
      }
    }

    /* Trade bridge */
    function updateUrlParams(params, withHash){
      const url = new URL(window.location.href);
      Object.entries(params).forEach(([k,v])=> url.searchParams.set(k, v));
      if (withHash) url.hash = withHash;
      history.replaceState(null, "", url.toString());
    }
    function scrollPlaceOrderCardTop(){
      const el = document.getElementById("placeCard");
      if(!el) return false;
      const y = el.getBoundingClientRect().top + window.pageYOffset - HEADER_OFFSET;
      window.scrollTo({ top: Math.max(0, y), behavior: "smooth" });
      return true;
    }
    function ensurePlaceOrderVisibleWithRetries(max=12, delay=120){
      let tries = 0;
      const tick = ()=>{ if (scrollPlaceOrderCardTop() || ++tries>=max) return; setTimeout(tick, delay); };
      tick();
    }
    function emitTrade(symbol, side="buy"){
      const evt = new CustomEvent("tamror:trade", { detail: { symbol, side } });
      window.dispatchEvent(evt);
      try{
        const symEl = document.getElementById("symbol");
        const sideEl = document.getElementById("side");
        if(symEl) symEl.value = symbol.toUpperCase();
        if(sideEl && sideEl.tagName === "SELECT") sideEl.value = side;
      }catch(e){}
      updateUrlParams({ trade: symbol.toUpperCase(), side: side.toLowerCase() }, "placeCard");
      ensurePlaceOrderVisibleWithRetries();
    }
    window.tamrorEmitTrade = emitTrade;

    /* =============== Hero (with sharia flyout) =============== */
    let heroIndex = 0, heroTimer = null;
    function heroSlideHTML(r){
      const pct = (r.pc>=0?"+":"")+fmt(r.pc)+"%";
      const delta = (r.delta>=0?"+":"")+fmt(r.delta);
      const have = HELD.has(String(r.s).toUpperCase());
      return `<div class="hero-slide">
        <div class="hero-left">
          <div class="symbol-row">
            <div style="font-weight:800;color:#333;font-size:18px;letter-spacing:.2px" class="hero-symbol" data-symbol="${r.s}">${r.s}</div>
          </div>
          <div class="hero-price">${fmt(r.last)} <span class="hero-delta ${r.pc>=0?'chg-pos':'chg-neg'}">${delta} · ${pct}</span></div>
          <div class="hero-cta">
            <button class="btn" type="button" onclick="tamrorEmitTrade('${r.s}','buy')">شراء ${r.s}</button>
            ${have?`<button class="btn btn-secondary" type="button" onclick="tamrorEmitTrade('${r.s}','sell')">بيع ${r.s}</button>`
                   :`<button class="btn btn-secondary ghost" type="button" aria-hidden="true" tabindex="-1">بيع ${r.s}</button>`}
          </div>
        </div>
        <div class="hero-right"><div class="hero-chart"></div></div>
      </div>`;
    }
    async function renderHero(){
      const host = $("heroSlides"), nav = $("heroNav");
      host.innerHTML = nav.innerHTML = "";
      const rows = (await fetchSnapshots(DEFAULT_WATCH)).sort((a,b)=>Math.abs(b.pc)-Math.abs(a.pc)).slice(0,5);
      for(const r of rows){
        host.insertAdjacentHTML("beforeend", heroSlideHTML(r));
        nav.insertAdjacentHTML("beforeend", `<span class="dot"></span>`);
      }
      const slides = Array.from(host.children);
      const dots = Array.from(nav.children);
      async function paintChart(idx){
        const slide = slides[idx];
        const sym = rows[idx].s;
        try{
          const bars = await getBars(sym, "5Min");
          const closes = (bars?.bars||[]).map(b=>+b.c).filter(n=>!isNaN(n)).slice(-90);
          drawSparkline(slide.querySelector(".hero-chart"), closes, {up: "#16a34a", down:"#ef4444"});
        }catch(e){}
      }
      function go(i){
        slides.forEach(s=>s.classList.remove("active"));
        dots.forEach(d=>d.classList.remove("active"));
        heroIndex = (i+slides.length)%slides.length;
        slides[heroIndex].classList.add("active");
        dots[heroIndex].classList.add("active");
        $("heroProgress").style.width = "0%";
        setTimeout(()=>{$("heroProgress").style.transition="none"; $("heroProgress").style.width="0%";},10);
        setTimeout(()=>{$("heroProgress").style.transition=`width ${HERO_ROTATE_MS}ms linear`; $("heroProgress").style.width="100%";},30);
        paintChart(heroIndex);
        attachShariaForSlide(slides[heroIndex]);
      }
      dots.forEach((d,i)=> d.onclick=()=>{ clearInterval(heroTimer); go(i); heroTimer=setInterval(()=>go(heroIndex+1), HERO_ROTATE_MS); });
      go(0);
      clearInterval(heroTimer);
      heroTimer = setInterval(()=>go(heroIndex+1), HERO_ROTATE_MS);
    }

    /* Sharia pill on hero */
    function createPill(statusOrData){
      const st = (typeof statusOrData === 'string') ? normalizeStatus(statusOrData) : deriveStatus(statusOrData);
      const label = statusToArabic(st);
      const pill = document.createElement('span');
      pill.className = 'sharia-pill';
      pill.setAttribute('data-status', st);
      pill.innerHTML = '<span class="dot" aria-hidden="true"></span>' + label;
      pill.setAttribute('tabindex','0');
      return pill;
    }
    function ensurePanel(pill){
      let panel = pill.querySelector('.sharia-panel');
      if (!panel){
        panel = document.createElement('div');
        panel.className = 'sharia-panel';
        panel.setAttribute('data-side','right');
        pill.appendChild(panel);
      }
      return panel;
    }
    function positionPanel(pill, panel){
      if(!pill || !panel) return;
      const hero  = pill.closest('.hero');
      const row   = pill.closest('.symbol-row') || pill;
      const pr = pill.getBoundingClientRect();
      const hr = hero.getBoundingClientRect();
      const rr = row.getBoundingClientRect();
      const prevHidden = panel.hidden, prevVis = panel.style.visibility;
      panel.hidden = false; panel.style.visibility = 'hidden';
      const panelW = Math.min(360, Math.max(240, panel.offsetWidth || 300));
      const ph = panel.offsetHeight || 160;
      panel.style.visibility = prevVis || ''; panel.hidden = prevHidden;
      const desiredLeft = pr.right + 8;
      const spaceRight  = hr.right - desiredLeft;
      const spaceLeft   = (pr.left - 8) - hr.left;
      let side = 'right';
      if(spaceRight < panelW && spaceLeft > spaceRight) side = 'left';
      panel.setAttribute('data-side', side);
      const offsetFromRowTop = (pr.bottom + 6) - rr.top;
      const maxTop = (hr.bottom - 8) - rr.top - ph;
      const minTop = 8;
      const clampedTop = Math.max(minTop, Math.min(offsetFromRowTop, Math.max(minTop, maxTop)));
      panel.style.top = clampedTop + 'px';
    }
    function wireHover(pill, panel){
      let inside = false, hideT;
      function show(){ clearTimeout(hideT); panel.classList.add('show'); positionPanel(pill, panel); }
      function hide(){ hideT = setTimeout(()=>{ if(!inside) panel.classList.remove('show'); }, 150); }
      pill.addEventListener('mouseenter', ()=>{ inside=true; show(); });
      pill.addEventListener('mouseleave', ()=>{ inside=false; hide(); });
      pill.addEventListener('focus',      ()=>{ inside=true; show(); });
      pill.addEventListener('blur',       ()=>{ inside=false; hide(); });
      panel.addEventListener('mouseenter',()=>{ inside=true; clearTimeout(hideT); });
      panel.addEventListener('mouseleave',()=>{ inside=false; hide(); });
      window.addEventListener('scroll', ()=>{ if(panel.classList.contains('show')) positionPanel(pill, panel); }, { passive:true });
      window.addEventListener('resize', ()=>{ if(panel.classList.contains('show')) positionPanel(pill, panel); });
    }
    function buildPanelHTML(m){
      m = m || {}; const r = m.ratios || {};
      const pct = v => (v==null||isNaN(+v)) ? '—' : (+(+v).toFixed(2)) + '%';
      const items = [
        ['إيرادات غير متوافقة', pct(r.non_compliant_revenue_pct)],
        ['الدين/القيمة السوقية', pct(r.debt_to_marketcap)],
        ['نقد/فوائد إلى القيمة السوقية', pct(r.cash_interest_to_marketcap)]
      ];
      const rows = items.map(([k,v])=>`<div class="row"><div class="k">${k}</div><div class="v">${v}</div></div>`).join('');
      const reasons = Array.isArray(m.reasons) && m.reasons.length ? `<div class="reasons"><b>الأسباب:</b> ${m.reasons.join(' · ')}</div>` : '';
      const std = m.methodology ? `<div class="row"><div class="k">المعيار</div><div class="v">${m.methodology}</div></div>` : '';
      const st = deriveStatus(m);
      return `<div class="title">مطابقة الشريعة: ${statusToArabic(st)}</div>${std}${rows}${reasons}`;
    }
    function attachShariaForSlide(slideEl){
      if(!slideEl) return;
      const symEl = slideEl.querySelector('.hero-symbol');
      if(!symEl) return;
      const symbol = normaliseSymbol(symEl.getAttribute('data-symbol') || symEl.textContent);
      if(!symbol) return;
      if (slideEl.querySelector('.symbol-row .sharia-pill')) return;

      fetchSharia(symbol).then(data=>{
        const row = slideEl.querySelector('.symbol-row');
        const pill = createPill(data);
        row.appendChild(pill);
        const panel = ensurePanel(pill);
        panel.innerHTML = buildPanelHTML(data);
        positionPanel(pill, panel);
        wireHover(pill, panel);
      });
    }
    function attachShariaAllVisibleSlides(){ document.querySelectorAll('#heroSlides .hero-slide').forEach(attachShariaForSlide); }
    document.addEventListener('DOMContentLoaded', ()=> { setTimeout(attachShariaAllVisibleSlides, 300); });

    /* ====== Kickoff ====== */
    async function refreshAll(){
      await Promise.all([refreshHeld(), loadTicker(DEFAULT_WATCH), renderHeatmap()]);
      await renderHero();
    }
    setInterval(()=> loadTicker(DEFAULT_WATCH), TICKER_REFRESH_MS);
    setInterval(refreshHeld, POSITIONS_REFRESH_MS);
    document.addEventListener("DOMContentLoaded", refreshAll);
  </script>
</div>
